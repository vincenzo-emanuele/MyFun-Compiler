
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import nodes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\020\005\000\002\002\004\000\002\017" +
    "\002\000\002\017\004\000\002\002\010\000\002\016\002" +
    "\000\002\016\004\000\002\015\005\000\002\015\005\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\004\003\000\002\004\005\000\002\004" +
    "\005\000\002\004\007\000\002\005\005\000\002\005\007" +
    "\000\002\006\003\000\002\006\004\000\002\006\003\000" +
    "\002\006\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\014\016\000\002\014\014\000\002\007" +
    "\002\000\002\007\003\000\002\010\003\000\002\010\005" +
    "\000\002\011\004\000\002\011\005\000\002\012\005\000" +
    "\002\012\002\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\004\000\002\032\012\000\002\013\002" +
    "\000\002\013\005\000\002\031\011\000\002\027\005\000" +
    "\002\027\004\000\002\025\003\000\002\025\005\000\002" +
    "\026\004\000\002\026\004\000\002\026\004\000\002\026" +
    "\004\000\002\024\005\000\002\023\006\000\002\023\005" +
    "\000\002\022\003\000\002\022\005\000\002\022\004\000" +
    "\002\022\006\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\004\000\002\021\004\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\020\004\uffff\005\013\007\006\010\012\011" +
    "\014\012\010\016\uffff\001\002\000\004\065\251\001\002" +
    "\000\004\002\250\001\002\000\040\005\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\017\ufff8\020\ufff8\023\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\031\ufff8\057\ufff8\065\ufff8\001" +
    "\002\000\006\004\ufffc\016\040\001\002\000\040\005\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\017\ufff7\020\ufff7\023" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\057\ufff7" +
    "\065\ufff7\001\002\000\046\004\uffff\005\013\007\006\010" +
    "\012\011\014\012\010\016\uffff\017\uffff\020\uffff\022\uffff" +
    "\023\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\057" +
    "\uffff\065\uffff\001\002\000\040\005\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\017\ufff5\020\ufff5\023\ufff5\025\ufff5\026" +
    "\ufff5\027\ufff5\030\ufff5\031\ufff5\057\ufff5\065\ufff5\001\002" +
    "\000\004\065\015\001\002\000\040\005\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\017\ufff6\020\ufff6\023\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\057\ufff6\065\ufff6\001" +
    "\002\000\004\032\034\001\002\000\006\055\020\056\017" +
    "\001\002\000\004\065\021\001\002\000\046\004\ufff9\005" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\022\ufff9\023\ufff9\025\ufff9\026\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\057\ufff9\065\ufff9\001\002\000\004\032\022" +
    "\001\002\000\016\034\026\053\025\054\030\062\023\063" +
    "\024\064\027\001\002\000\006\055\uffe8\056\uffe8\001\002" +
    "\000\006\055\uffee\056\uffee\001\002\000\006\055\uffea\056" +
    "\uffea\001\002\000\006\063\032\064\033\001\002\000\006" +
    "\055\uffec\056\uffec\001\002\000\006\055\uffe9\056\uffe9\001" +
    "\002\000\006\055\uffef\056\uffef\001\002\000\006\055\uffed" +
    "\056\uffed\001\002\000\006\055\uffeb\056\uffeb\001\002\000" +
    "\016\034\026\053\025\054\030\062\023\063\024\064\027" +
    "\001\002\000\006\055\ufff0\056\ufff0\001\002\000\034\004" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\022\ufffe\023\ufffe\025\ufffe" +
    "\026\ufffe\027\ufffe\030\ufffe\031\ufffe\057\ufffe\065\ufffe\001" +
    "\002\000\006\004\ufffc\016\040\001\002\000\004\065\216" +
    "\001\002\000\004\004\042\001\002\000\040\005\013\007" +
    "\006\010\012\011\014\012\010\017\uffff\020\uffff\023\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\057\uffff\065" +
    "\uffff\001\002\000\004\002\001\001\002\000\026\017\uffde" +
    "\020\054\023\046\025\045\026\060\027\051\030\065\031" +
    "\050\057\063\065\057\001\002\000\004\065\211\001\002" +
    "\000\024\013\073\034\066\052\100\053\071\054\075\062" +
    "\072\063\076\064\067\065\077\001\002\000\004\055\uffdc" +
    "\001\002\000\024\013\073\034\066\052\100\053\071\054" +
    "\075\062\072\063\076\064\067\065\077\001\002\000\024" +
    "\013\073\034\066\052\100\053\071\054\075\062\072\063" +
    "\076\064\067\065\077\001\002\000\004\055\uffd8\001\002" +
    "\000\004\055\uffdd\001\002\000\024\013\073\034\066\052" +
    "\100\053\071\054\075\062\072\063\076\064\067\065\077" +
    "\001\002\000\004\017\164\001\002\000\004\055\uffd9\001" +
    "\002\000\006\013\140\032\162\001\002\000\024\013\073" +
    "\034\066\052\100\053\071\054\075\062\072\063\076\064" +
    "\067\065\077\001\002\000\004\055\uffda\001\002\000\004" +
    "\055\157\001\002\000\024\013\073\034\066\052\100\053" +
    "\071\054\075\062\072\063\076\064\067\065\077\001\002" +
    "\000\004\055\uffdb\001\002\000\024\013\073\034\066\052" +
    "\100\053\071\054\075\062\072\063\076\064\067\065\077" +
    "\001\002\000\024\013\073\034\066\052\100\053\071\054" +
    "\075\062\072\063\076\064\067\065\077\001\002\000\052" +
    "\014\uffc0\021\uffc0\024\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\055\uffc0\056" +
    "\uffc0\001\002\000\042\033\106\034\102\035\113\036\120" +
    "\037\111\040\104\041\115\042\107\043\114\044\116\045" +
    "\110\046\112\047\105\050\103\051\117\055\uffcb\001\002" +
    "\000\052\014\uffc3\021\uffc3\024\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\055" +
    "\uffc3\056\uffc3\001\002\000\052\014\uffbf\021\uffbf\024\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\055\uffbf\056\uffbf\001\002\000\024\013" +
    "\073\034\066\052\100\053\071\054\075\062\072\063\076" +
    "\064\067\065\077\001\002\000\052\014\uffbd\021\uffbd\024" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\055\uffbd\056\uffbd\001\002\000\052" +
    "\014\uffc2\021\uffc2\024\uffc2\033\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\055\uffc2\056" +
    "\uffc2\001\002\000\052\014\uffc1\021\uffc1\024\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\055\uffc1\056\uffc1\001\002\000\054\013\140\014" +
    "\uffbe\021\uffbe\024\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\055\uffbe\056\uffbe" +
    "\001\002\000\024\013\073\034\066\052\100\053\071\054" +
    "\075\062\072\063\076\064\067\065\077\001\002\000\052" +
    "\014\uffac\021\uffac\024\uffac\033\106\034\102\035\113\036" +
    "\120\037\111\040\104\041\115\042\107\043\114\044\116" +
    "\045\110\046\112\047\105\050\uffac\051\uffac\055\uffac\056" +
    "\uffac\001\002\000\024\013\073\034\066\052\100\053\071" +
    "\054\075\062\072\063\076\064\067\065\077\001\002\000" +
    "\024\013\073\034\066\052\100\053\071\054\075\062\072" +
    "\063\076\064\067\065\077\001\002\000\024\013\073\034" +
    "\066\052\100\053\071\054\075\062\072\063\076\064\067" +
    "\065\077\001\002\000\024\013\073\034\066\052\100\053" +
    "\071\054\075\062\072\063\076\064\067\065\077\001\002" +
    "\000\024\013\073\034\066\052\100\053\071\054\075\062" +
    "\072\063\076\064\067\065\077\001\002\000\024\013\073" +
    "\034\066\052\100\053\071\054\075\062\072\063\076\064" +
    "\067\065\077\001\002\000\024\013\073\034\066\052\100" +
    "\053\071\054\075\062\072\063\076\064\067\065\077\001" +
    "\002\000\024\013\073\034\066\052\100\053\071\054\075" +
    "\062\072\063\076\064\067\065\077\001\002\000\024\013" +
    "\073\034\066\052\100\053\071\054\075\062\072\063\076" +
    "\064\067\065\077\001\002\000\024\013\073\034\066\052" +
    "\100\053\071\054\075\062\072\063\076\064\067\065\077" +
    "\001\002\000\024\013\073\034\066\052\100\053\071\054" +
    "\075\062\072\063\076\064\067\065\077\001\002\000\024" +
    "\013\073\034\066\052\100\053\071\054\075\062\072\063" +
    "\076\064\067\065\077\001\002\000\024\013\073\034\066" +
    "\052\100\053\071\054\075\062\072\063\076\064\067\065" +
    "\077\001\002\000\024\013\073\034\066\052\100\053\071" +
    "\054\075\062\072\063\076\064\067\065\077\001\002\000" +
    "\024\013\073\034\066\052\100\053\071\054\075\062\072" +
    "\063\076\064\067\065\077\001\002\000\052\014\uffb8\021" +
    "\uffb8\024\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\104\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\050\uffb8\051\uffb8\055\uffb8\056\uffb8\001\002" +
    "\000\052\014\uffb4\021\uffb4\024\uffb4\033\106\034\102\035" +
    "\113\036\120\037\111\040\104\041\115\042\107\043\114" +
    "\044\116\045\110\046\112\047\105\050\103\051\uffb4\055" +
    "\uffb4\056\uffb4\001\002\000\036\014\uffb1\021\uffb1\024\uffb1" +
    "\033\106\034\102\035\113\036\120\037\111\040\104\041" +
    "\115\050\uffb1\051\uffb1\055\uffb1\056\uffb1\001\002\000\052" +
    "\014\uffb5\021\uffb5\024\uffb5\033\106\034\102\035\113\036" +
    "\120\037\111\040\104\041\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\055\uffb5\056" +
    "\uffb5\001\002\000\036\014\uffae\021\uffae\024\uffae\033\106" +
    "\034\102\035\113\036\120\037\111\040\104\041\115\050" +
    "\uffae\051\uffae\055\uffae\056\uffae\001\002\000\052\014\uffba" +
    "\021\uffba\024\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037" +
    "\uffba\040\104\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\055\uffba\056\uffba\001" +
    "\002\000\036\014\uffb3\021\uffb3\024\uffb3\033\106\034\102" +
    "\035\113\036\120\037\111\040\104\041\115\050\uffb3\051" +
    "\uffb3\055\uffb3\056\uffb3\001\002\000\052\014\uffb9\021\uffb9" +
    "\024\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\104\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\055\uffb9\056\uffb9\001\002\000" +
    "\036\014\uffb0\021\uffb0\024\uffb0\033\106\034\102\035\113" +
    "\036\120\037\111\040\104\041\115\050\uffb0\051\uffb0\055" +
    "\uffb0\056\uffb0\001\002\000\036\014\uffaf\021\uffaf\024\uffaf" +
    "\033\106\034\102\035\113\036\120\037\111\040\104\041" +
    "\115\050\uffaf\051\uffaf\055\uffaf\056\uffaf\001\002\000\052" +
    "\014\uffbc\021\uffbc\024\uffbc\033\uffbc\034\uffbc\035\113\036" +
    "\120\037\111\040\104\041\uffbc\042\uffbc\043\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\055\uffbc\056" +
    "\uffbc\001\002\000\036\014\uffb2\021\uffb2\024\uffb2\033\106" +
    "\034\102\035\113\036\120\037\111\040\104\041\115\050" +
    "\uffb2\051\uffb2\055\uffb2\056\uffb2\001\002\000\052\014\uffb6" +
    "\021\uffb6\024\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\104\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\055\uffb6\056\uffb6\001" +
    "\002\000\052\014\uffb7\021\uffb7\024\uffb7\033\106\034\102" +
    "\035\113\036\120\037\111\040\104\041\115\042\107\043" +
    "\114\044\116\045\110\046\112\047\105\050\uffb7\051\uffb7" +
    "\055\uffb7\056\uffb7\001\002\000\052\014\uffbb\021\uffbb\024" +
    "\uffbb\033\uffbb\034\uffbb\035\113\036\120\037\111\040\104" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\055\uffbb\056\uffbb\001\002\000\030" +
    "\013\073\014\144\034\066\052\100\053\071\054\075\060" +
    "\143\062\072\063\076\064\067\065\077\001\002\000\044" +
    "\014\uffc7\033\106\034\102\035\113\036\120\037\111\040" +
    "\104\041\115\042\107\043\114\044\116\045\110\046\112" +
    "\047\105\050\103\051\117\056\151\001\002\000\004\014" +
    "\150\001\002\000\004\065\145\001\002\000\052\014\uffc8" +
    "\021\uffc8\024\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\055\uffc8\056\uffc8\001" +
    "\002\000\006\014\uffc5\056\146\001\002\000\026\013\073" +
    "\034\066\052\100\053\071\054\075\060\143\062\072\063" +
    "\076\064\067\065\077\001\002\000\004\014\uffc4\001\002" +
    "\000\052\014\uffc9\021\uffc9\024\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\055" +
    "\uffc9\056\uffc9\001\002\000\026\013\073\034\066\052\100" +
    "\053\071\054\075\060\143\062\072\063\076\064\067\065" +
    "\077\001\002\000\004\014\uffc6\001\002\000\042\014\154" +
    "\033\106\034\102\035\113\036\120\037\111\040\104\041" +
    "\115\042\107\043\114\044\116\045\110\046\112\047\105" +
    "\050\103\051\117\001\002\000\052\014\uffab\021\uffab\024" +
    "\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047" +
    "\uffab\050\uffab\051\uffab\055\uffab\056\uffab\001\002\000\052" +
    "\014\uffad\021\uffad\024\uffad\033\uffad\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\055\uffad\056" +
    "\uffad\001\002\000\042\033\106\034\102\035\113\036\120" +
    "\037\111\040\104\041\115\042\107\043\114\044\116\045" +
    "\110\046\112\047\105\050\103\051\117\055\uffd7\001\002" +
    "\000\030\017\uffde\020\054\022\uffde\023\046\025\045\026" +
    "\060\027\051\030\065\031\050\057\063\065\057\001\002" +
    "\000\006\017\uffdf\022\uffdf\001\002\000\042\033\106\034" +
    "\102\035\113\036\120\037\111\040\104\041\115\042\107" +
    "\043\114\044\116\045\110\046\112\047\105\050\103\051" +
    "\117\055\uffce\001\002\000\024\013\073\034\066\052\100" +
    "\053\071\054\075\062\072\063\076\064\067\065\077\001" +
    "\002\000\042\033\106\034\102\035\113\036\120\037\111" +
    "\040\104\041\115\042\107\043\114\044\116\045\110\046" +
    "\112\047\105\050\103\051\117\055\uffca\001\002\000\004" +
    "\004\165\001\002\000\004\055\166\001\002\000\004\002" +
    "\ufffd\001\002\000\042\021\170\033\106\034\102\035\113" +
    "\036\120\037\111\040\104\041\115\042\107\043\114\044" +
    "\116\045\110\046\112\047\105\050\103\051\117\001\002" +
    "\000\042\005\013\007\006\010\012\011\014\012\010\017" +
    "\uffff\020\uffff\022\uffff\023\uffff\025\uffff\026\uffff\027\uffff" +
    "\030\uffff\031\uffff\057\uffff\065\uffff\001\002\000\030\017" +
    "\uffde\020\054\022\uffde\023\046\025\045\026\060\027\051" +
    "\030\065\031\050\057\063\065\057\001\002\000\006\017" +
    "\uffd5\022\173\001\002\000\040\005\013\007\006\010\012" +
    "\011\014\012\010\017\uffff\020\uffff\023\uffff\025\uffff\026" +
    "\uffff\027\uffff\030\uffff\031\uffff\057\uffff\065\uffff\001\002" +
    "\000\004\017\175\001\002\000\004\020\176\001\002\000" +
    "\004\055\uffd6\001\002\000\026\017\uffde\020\054\023\046" +
    "\025\045\026\060\027\051\030\065\031\050\057\063\065" +
    "\057\001\002\000\004\017\uffd4\001\002\000\042\033\106" +
    "\034\102\035\113\036\120\037\111\040\104\041\115\042" +
    "\107\043\114\044\116\045\110\046\112\047\105\050\103" +
    "\051\117\055\uffcd\001\002\000\042\033\106\034\102\035" +
    "\113\036\120\037\111\040\104\041\115\042\107\043\114" +
    "\044\116\045\110\046\112\047\105\050\103\051\117\055" +
    "\uffcc\001\002\000\042\024\204\033\106\034\102\035\113" +
    "\036\120\037\111\040\104\041\115\042\107\043\114\044" +
    "\116\045\110\046\112\047\105\050\103\051\117\001\002" +
    "\000\040\005\013\007\006\010\012\011\014\012\010\017" +
    "\uffff\020\uffff\023\uffff\025\uffff\026\uffff\027\uffff\030\uffff" +
    "\031\uffff\057\uffff\065\uffff\001\002\000\026\017\uffde\020" +
    "\054\023\046\025\045\026\060\027\051\030\065\031\050" +
    "\057\063\065\057\001\002\000\004\017\207\001\002\000" +
    "\004\024\210\001\002\000\004\055\uffd3\001\002\000\030" +
    "\013\uffd0\034\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\001\002\000\030" +
    "\013\073\034\066\052\100\053\071\054\075\055\uffd1\056" +
    "\214\062\072\063\076\064\067\065\077\001\002\000\042" +
    "\033\106\034\102\035\113\036\120\037\111\040\104\041" +
    "\115\042\107\043\114\044\116\045\110\046\112\047\105" +
    "\050\103\051\117\055\uffd2\001\002\000\004\065\215\001" +
    "\002\000\030\013\uffcf\034\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\001" +
    "\002\000\004\013\217\001\002\000\016\006\224\007\006" +
    "\010\012\011\014\012\010\014\uffe5\001\002\000\004\065" +
    "\246\001\002\000\004\014\231\001\002\000\006\014\uffe3" +
    "\056\uffe3\001\002\000\006\014\uffe4\056\227\001\002\000" +
    "\012\007\006\010\012\011\014\012\010\001\002\000\004" +
    "\065\226\001\002\000\006\014\uffe0\056\uffe0\001\002\000" +
    "\014\006\224\007\006\010\012\011\014\012\010\001\002" +
    "\000\006\014\uffe2\056\uffe2\001\002\000\042\005\013\007" +
    "\006\010\012\011\014\012\010\015\233\017\uffff\020\uffff" +
    "\023\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\057" +
    "\uffff\065\uffff\001\002\000\026\017\uffde\020\054\023\046" +
    "\025\045\026\060\027\051\030\065\031\050\057\063\065" +
    "\057\001\002\000\012\007\006\010\012\011\014\012\010" +
    "\001\002\000\040\005\013\007\006\010\012\011\014\012" +
    "\010\017\uffff\020\uffff\023\uffff\025\uffff\026\uffff\027\uffff" +
    "\030\uffff\031\uffff\057\uffff\065\uffff\001\002\000\026\017" +
    "\uffde\020\054\023\046\025\045\026\060\027\051\030\065" +
    "\031\050\057\063\065\057\001\002\000\004\017\237\001" +
    "\002\000\004\016\240\001\002\000\004\055\241\001\002" +
    "\000\006\004\uffe7\016\uffe7\001\002\000\004\017\243\001" +
    "\002\000\004\016\244\001\002\000\004\055\245\001\002" +
    "\000\006\004\uffe6\016\uffe6\001\002\000\006\014\uffe1\056" +
    "\uffe1\001\002\000\004\004\ufffb\001\002\000\004\002\000" +
    "\001\002\000\010\032\260\055\ufff4\056\ufff4\001\002\000" +
    "\006\055\254\056\253\001\002\000\004\065\255\001\002" +
    "\000\046\004\ufffa\005\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\022\ufffa\023\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\031\ufffa\057\ufffa\065\ufffa\001" +
    "\002\000\010\032\256\055\ufff3\056\ufff3\001\002\000\024" +
    "\013\073\034\066\052\100\053\071\054\075\062\072\063" +
    "\076\064\067\065\077\001\002\000\044\033\106\034\102" +
    "\035\113\036\120\037\111\040\104\041\115\042\107\043" +
    "\114\044\116\045\110\046\112\047\105\050\103\051\117" +
    "\055\ufff1\056\ufff1\001\002\000\024\013\073\034\066\052" +
    "\100\053\071\054\075\062\072\063\076\064\067\065\077" +
    "\001\002\000\044\033\106\034\102\035\113\036\120\037" +
    "\111\040\104\041\115\042\107\043\114\044\116\045\110" +
    "\046\112\047\105\050\103\051\117\055\ufff2\056\ufff2\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\012\003\003\015\010\017\006\020\004\001" +
    "\001\000\004\004\251\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\036\016\040\001\001\000\002\001" +
    "\001\000\010\003\003\015\010\017\035\001\001\000\002" +
    "\001\001\000\004\005\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\036\016\246\001\001\000\002\001\001\000\004\002\042" +
    "\001\001\000\010\003\003\015\010\017\043\001\001\000" +
    "\002\001\001\000\022\012\054\023\051\024\055\026\060" +
    "\027\063\030\061\031\046\032\052\001\001\000\004\025" +
    "\211\001\001\000\006\021\202\023\073\001\001\000\002" +
    "\001\001\000\006\021\201\023\073\001\001\000\006\021" +
    "\200\023\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\166\023\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\160\023\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\155\023\073\001\001\000\002\001\001\000\006\021\067" +
    "\023\073\001\001\000\006\021\154\023\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\152\023\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\100\023\073\001\001\000\002\001\001\000" +
    "\006\021\136\023\073\001\001\000\006\021\135\023\073" +
    "\001\001\000\006\021\134\023\073\001\001\000\006\021" +
    "\133\023\073\001\001\000\006\021\132\023\073\001\001" +
    "\000\006\021\131\023\073\001\001\000\006\021\130\023" +
    "\073\001\001\000\006\021\127\023\073\001\001\000\006" +
    "\021\126\023\073\001\001\000\006\021\125\023\073\001" +
    "\001\000\006\021\124\023\073\001\001\000\006\021\123" +
    "\023\073\001\001\000\006\021\122\023\073\001\001\000" +
    "\006\021\121\023\073\001\001\000\006\021\120\023\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\021" +
    "\140\022\141\023\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\021\140\022\146\023\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\140\022\151\023" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\012" +
    "\157\023\051\024\055\026\060\027\063\030\061\031\046" +
    "\032\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\162\023\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\003\015\010\017\170\001\001\000\022" +
    "\012\171\023\051\024\055\026\060\027\063\030\061\031" +
    "\046\032\052\001\001\000\004\013\173\001\001\000\010" +
    "\003\003\015\010\017\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\012\177\023\051" +
    "\024\055\026\060\027\063\030\061\031\046\032\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\003\015\010\017\204\001" +
    "\001\000\022\012\205\023\051\024\055\026\060\027\063" +
    "\030\061\031\046\032\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\212\023\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\217" +
    "\007\220\010\222\011\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\217\011\227\001\001\000\002\001\001\000\010" +
    "\003\003\015\010\017\231\001\001\000\022\012\241\023" +
    "\051\024\055\026\060\027\063\030\061\031\046\032\052" +
    "\001\001\000\004\003\233\001\001\000\010\003\003\015" +
    "\010\017\234\001\001\000\022\012\235\023\051\024\055" +
    "\026\060\027\063\030\061\031\046\032\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\256\023\073\001\001\000\002\001\001\000\006\021" +
    "\260\023\073\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList FunList Main 
            {
              ProgramOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclOpList varDeclList = (VarDeclOpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int funListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunOpList funList = (FunOpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MainOp main = (MainOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ProgramOp(varDeclList, funList, main);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= 
            {
              VarDeclOpList RESULT =null;
		RESULT = new VarDeclOpList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDecl VarDeclList 
            {
              VarDeclOpList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclOp v = (VarDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclOpList list = (VarDeclOpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new VarDeclOpList(v, list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Main ::= MAIN VarDeclList StatList END MAIN SEMI 
            {
              MainOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarDeclOpList varDeclList = (VarDeclOpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatOpList statList = (StatOpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new MainOp(varDeclList, statList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunList ::= 
            {
              FunOpList RESULT =null;
		RESULT = new FunOpList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FunList ::= Fun FunList 
            {
              FunOpList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunOp f = (FunOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunOpList list = (FunOpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FunOpList(f, list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeOp t = (TypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdListInitOp idList = (IdListInitOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarDeclOp(t, idList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= VAR IdListInitObbl SEMI 
            {
              VarDeclOp RESULT =null;
		int idListObblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListObblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdListInitObblOp idListObbl = (IdListInitObblOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarDeclOp(idListObbl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= INTEGER 
            {
              TypeOp RESULT =null;
		RESULT = new TypeOp("INTEGER");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= BOOL 
            {
              TypeOp RESULT =null;
		RESULT = new TypeOp("BOOLEAN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= REAL 
            {
              TypeOp RESULT =null;
		RESULT = new TypeOp("REAL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= STRING 
            {
              TypeOp RESULT =null;
		RESULT = new TypeOp("STRING");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID 
            {
              IdListInitOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdListInitOp(new IdOp(val));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID 
            {
              IdListInitOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdListInitOp list = (IdListInitOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdListInitOp(list, new IdOp(val));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdListInit ::= ID ASSIGN Expr 
            {
              IdListInitOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdListInitOp(new IdOp(val), e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              IdListInitOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdListInitOp list = (IdListInitOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdListInitOp(list, new IdOp(val), e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdListInitObbl ::= ID ASSIGN Const 
            {
              IdListInitObblOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstOp c = (ConstOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdListInitObblOp(new IdOp(val), c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdListInitObbl ::= IdListInitObbl COMMA ID ASSIGN Const 
            {
              IdListInitObblOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdListInitObblOp list = (IdListInitObblOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstOp c = (ConstOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdListInitObblOp(list, new IdOp(val), c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              ConstOp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstOp(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= MINUS INTEGER_CONST 
            {
              ConstOp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstOp(-c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= REAL_CONST 
            {
              ConstOp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstOp(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= MINUS REAL_CONST 
            {
              ConstOp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstOp(-c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= TRUE 
            {
              ConstOp RESULT =null;
		RESULT = new ConstOp(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= FALSE 
            {
              ConstOp RESULT =null;
		RESULT = new ConstOp(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Const ::= STRING_CONST 
            {
              ConstOp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstOp(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Fun ::= FUN ID LPAR ParamDeclList RPAR COLON Type VarDeclList StatList END FUN SEMI 
            {
              FunOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParamDeclListOp paramList = (ParamDeclListOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TypeOp t = (TypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarDeclOpList varDeclList = (VarDeclOpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatOpList statList = (StatOpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new FunOp(new IdOp(val), paramList, t, varDeclList, statList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fun",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Fun ::= FUN ID LPAR ParamDeclList RPAR VarDeclList StatList END FUN SEMI 
            {
              FunOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParamDeclListOp paramList = (ParamDeclListOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarDeclOpList varDeclList = (VarDeclOpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatOpList statList = (StatOpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new FunOp(new IdOp(val), paramList, varDeclList, statList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fun",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParamDeclList ::= 
            {
              ParamDeclListOp RESULT =null;
		RESULT = new ParamDeclListOp();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ParamDeclListOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NonEmptyParamDeclListOp list = (NonEmptyParamDeclListOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParamDeclListOp(list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NonEmptyParamDeclList ::= ParDecl 
            {
              NonEmptyParamDeclListOp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOp p = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NonEmptyParamDeclListOp(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NonEmptyParamDeclList ::= NonEmptyParamDeclList COMMA ParDecl 
            {
              NonEmptyParamDeclListOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NonEmptyParamDeclListOp list = (NonEmptyParamDeclListOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOp p = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NonEmptyParamDeclListOp(list, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParDecl ::= Type ID 
            {
              ParDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParDeclOp(new InOutOp("in"), type, new IdOp(val));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ParDecl ::= OUT Type ID 
            {
              ParDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeOp type = (TypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParDeclOp(new InOutOp("out"), type, new IdOp(val));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // StatList ::= Stat SEMI StatList 
            {
              StatOpList RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatOp stat = (StatOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatOpList list = (StatOpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StatOpList(stat, list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // StatList ::= 
            {
              StatOpList RESULT =null;
		RESULT = new StatOpList();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= IfStat 
            {
              StatOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatOp s = (IfStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StatOp(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= WhileStat 
            {
              StatOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStatOp s = (WhileStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StatOp(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= ReadStat 
            {
              StatOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReadStatOp s = (ReadStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StatOp(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= WriteStat 
            {
              StatOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WriteStatOp s = (WriteStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StatOp(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= AssignStat 
            {
              StatOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignStatOp s = (AssignStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StatOp(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= CallFun 
            {
              StatOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallFunOp s = (CallFunOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StatOp(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= RETURN Expr 
            {
              StatOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new StatOp(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IfStat ::= IF Expr THEN VarDeclList StatList Else END IF 
            {
              IfStatOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarDeclOpList v = (VarDeclOpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatOpList s = (StatOpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ElseOp el = (ElseOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new IfStatOp(e, v, s, el);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Else ::= 
            {
              ElseOp RESULT =null;
		RESULT = new ElseOp();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Else ::= ELSE VarDeclList StatList 
            {
              ElseOp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclOpList v = (VarDeclOpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatOpList s = (StatOpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ElseOp(v, s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // WhileStat ::= WHILE Expr LOOP VarDeclList StatList END LOOP 
            {
              WhileStatOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclOpList v = (VarDeclOpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatOpList s = (StatOpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new WhileStatOp(e, v, s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ReadStat ::= READ IdList Expr 
            {
              ReadStatOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdListOp list = (IdListOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReadStatOp(list, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ReadStat ::= READ IdList 
            {
              ReadStatOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdListOp list = (IdListOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReadStatOp(list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IdList ::= ID 
            {
              IdListOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdListOp(new IdOp(val));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IdList ::= IdList COMMA ID 
            {
              IdListOp RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdListOp list = (IdListOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdListOp(new IdOp(val), list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WriteStat ::= WRITE Expr 
            {
              WriteStatOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WriteStatOp("WRITE", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WriteStat ::= WRITELN Expr 
            {
              WriteStatOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WriteStatOp("WRITELN", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WriteStat ::= WRITET Expr 
            {
              WriteStatOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WriteStatOp("WRITET", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WriteStat ::= WRITEB Expr 
            {
              WriteStatOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WriteStatOp("WRITEB", e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AssignStat ::= ID ASSIGN Expr 
            {
              AssignStatOp RESULT =null;
		int lvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String lval = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode rval = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignStatOp(new IdOp(lval), rval);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CallFun ::= ID LPAR ExprList RPAR 
            {
              CallFunOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprListOp list = (ExprListOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CallFunOp(list, new FunctionNameOp(val));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CallFun ::= ID LPAR RPAR 
            {
              CallFunOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new CallFunOp(new FunctionNameOp(val));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExprList ::= Expr 
            {
              ExprListOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprListOp(new InOutOp("in"), e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExprList ::= Expr COMMA ExprList 
            {
              ExprListOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprListOp list = (ExprListOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprListOp(new InOutOp("in"), e, list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExprList ::= OUTPAR ID 
            {
              ExprListOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprListOp(new InOutOp("out"), new IdOp(val));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExprList ::= OUTPAR ID COMMA ExprList 
            {
              ExprListOp RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprListOp list = (ExprListOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprListOp(new InOutOp("out"), new IdOp(val), list);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= TRUE 
            {
              ExprNode RESULT =null;
		RESULT = new ExprNode(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= FALSE 
            {
              ExprNode RESULT =null;
		RESULT = new ExprNode(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= INTEGER_CONST 
            {
              ExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= REAL_CONST 
            {
              ExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= STRING_CONST 
            {
              ExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= ID 
            {
              ExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(new IdOp(val));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= CallFun 
            {
              ExprNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallFunOp c = (CallFunOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr PLUS Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e1, e2, "+");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr MINUS Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e1, e2, "-");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr TIMES Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e1, e2, "*");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr DIV Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e1, e2, "/");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr DIVINT Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e1, e2, "DIVINT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr AND Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e1, e2, "AND");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr POW Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e1, e2, "^");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr STR_CONCAT Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e1, e2, "&");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr OR Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e1, e2, "OR");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr GT Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e1, e2, ">");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr GE Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e1, e2, ">=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr LT Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e1, e2, "<");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr LE Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e1, e2, "<=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr EQ Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e1, e2, "=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr NE Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e1, e2, "!=");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= MINUS Expr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e, "UMINUS");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= NOT Expr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ExprNode(e, "NOT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= LPAR Expr RPAR 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
